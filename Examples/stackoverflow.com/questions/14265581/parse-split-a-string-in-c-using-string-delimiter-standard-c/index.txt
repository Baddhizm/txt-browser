=====QUESTION:=====
Possible Duplicate:
  [http://stackoverflow.com/questions/236129/splitting-a-string-in-c]Splitting a string in C++  
I am parsing a string in C++ using the following:
<code>
string parsed,input="text to be parsed";
stringstream input_stringstream(input);if(getline(input_stringstream,parsed,' '))
{
     // do some processing.
}
</code>
Parsing with a single char delimiter is fine. But what if I want to use a string as delimiter.Example: I want to split:
<code>
scott=tiger
</code>
with >= as delimiter so that I can get scott and tiger.   
    
=====ANSWER:=====

    
You can use the [http://en.cppreference.com/w/cpp/string/basic_string/find]
<code>
std::string::find()</code>
 function to find the position of your string delimiter, then use [http://en.cppreference.com/w/cpp/string/basic_string/substr]
<code>
std::string::substr()</code>
 to get a token.Example:
<code>
std::string s = "scott=tiger";
std::string delimiter = "=";
std::string token = s.substr(0, s.find(delimiter)); // token is "scott"
</code>The 
<code>
find(const string str, size_t pos = 0)</code>
 function returns the position of the first occurrence of 
<code>
str</code>
 in the string, or [http://en.cppreference.com/w/cpp/string/basic_string/npos]
<code>
npos</code>
 if the string is not found.
The 
<code>
substr(size_t pos = 0, size_t n = npos)</code>
 function returns a substring of the object, starting at position 
<code>
pos</code>
 and of length 
<code>
npos</code>
.
If you have multiple delimiters, after you have extracted one token, you can remove it (delimiter included) to proceed with subsequent extractions (if you want to preserve the original string, just use 
<code>
s = s.substr(pos + delimiter.length());</code>
):
<code>
s.erase(0, s.find(delimiter) + delimiter.length());
</code>
This way you can easily loop to get each token.<h2> Complete Example </h2>
<code>
std::string s = "scott=tiger=mushroom";
std::string delimiter = "=";size_t pos = 0;
std::string token;
while ((pos = s.find(delimiter)) != std::string::npos) {
    token = s.substr(0, pos);
    std::cout  token  std::endl;
    s.erase(0, pos + delimiter.length());
}
std::cout  s  std::endl;
</code>
Output:
<code>
scott
tiger
mushroom
</code>    </div>
    